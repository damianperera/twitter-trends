{"version":3,"sources":["twitter-logo.svg","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","App","props","isDevelopmentBuild","process","TWITTER_BEARER_TOKEN","state","ip","trends","console","warn","fetch","then","res","json","setState","trend","query","headers","Authorization","this","data","tweets","statuses","Promise","resolve","slice","i","length","fetchSearch","fetchIP","trackPromise","fetchTrends","className","Component","StateSwitcher","promiseInProgress","usePromiseTracker","style","position","CSSTransition","in","timeout","classNames","unmountOnExit","AppLoader","flexDirection","justifyContent","display","alignItems","alt","src","logo","height","width","color","loading","AppBody","map","key","name","Boolean","window","location","hostname","match","ReactDOM","render","basename","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"0GAAAA,EAAOC,QAAU,IAA0B,0C,iRCOrCC,G,wDAEJ,WAAYC,GAAa,IAAD,8BACtB,cAAMA,IAORC,oBAA8BC,EARN,EASxBC,qBAAuBD,qHAPrB,EAAKE,MAAQ,CACXC,GAAI,YACJC,OAAQ,IAJY,E,+CAWpBL,GACFM,QAAQC,KAAK,iD,gCAGJ,IAAD,OACRC,MAAM,qCACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,gBAAGL,EAAH,EAAGA,GAAH,OAAY,EAAKQ,SAAS,CAAER,Y,2EAGpBS,G,yFACEL,MAAM,gEAAD,OAAiEK,EAAMC,MAAvE,YAAwF,CAC7GC,QAAS,CACPC,cAAc,UAAD,OAAYC,KAAKf,yB,cAF5BQ,E,gBAKaA,EAAIC,O,cAAjBO,E,OACNL,EAAMM,OAASD,EAAKE,S,kBACbC,QAAQC,QAAQT,I,iRAILL,MAAM,iEAAkE,CACxFO,QAAS,CACPC,cAAc,UAAD,OAAYC,KAAKf,yB,cAF5BQ,E,gBAKgBA,EAAIC,O,OAApBN,E,OAA4B,GAAGA,OAAOkB,MAAM,EAAE,GAE3CC,EAAI,E,YAAGA,EAAInB,EAAOoB,Q,kCACLR,KAAKS,YAAYrB,EAAOmB,I,QAAtCX,E,OACNR,EAAOmB,GAAKX,E,QAFqBW,I,8BAKnCP,KAAKL,SAAS,CAAEP,W,kBAETgB,QAAQC,W,iJAIVL,KAAKjB,qBACRiB,KAAKU,UACLC,uBAAaX,KAAKY,kB,+BAKpB,OACE,yBAAKC,UAAU,OACXb,KAAKjB,oBACL,4BAAQ8B,UAAU,cAChB,yCACa,6BAAK,6BAAK,kEAI3B,4BAAQA,UAAU,cAChB,kBAAC,EAAkBb,KAAKd,a,GAtEhB4B,cA6EZC,EAAgB,SAACjC,GAAgB,IAC7BM,EAAWN,EAAXM,OACA4B,EAAsBC,8BAAtBD,kBACR,OACE,yBAAKE,MAAS,CAAEC,SAAU,aACxB,kBAACC,EAAA,EAAD,CACEC,GAAIL,EACJM,QAAS,IACTC,WAAW,UACXC,eAAa,GAEb,kBAAC,EAAD,OAEF,kBAACJ,EAAA,EAAD,CACEC,IAAKL,EACLM,QAAS,IACTC,WAAW,YACXC,eAAa,GAEb,kBAAC,EAAD,CAASpC,OAAQA,OAMnBqC,EAAY,WAChB,OACE,yBAAKZ,UAAU,aACb,yBAAKK,MAAO,CAAEQ,cAAe,MAAOC,eAAgB,SAAUC,QAAS,OAAQC,WAAY,WACzF,yBAAKhB,UAAU,eAAeiB,IAAI,UAAUC,IAAKC,MACjD,uCACE,yBAAKd,MAAO,CAAEe,OAAQ,UACpB,kBAAC,IAAD,CACEA,OAAQ,EACRC,MAAO,MACPC,MAAO,QACPC,SAAO,SASfC,EAAU,SAACvD,GAAgB,IACvBM,EAAWN,EAAXM,OACR,OACE,yBAAKyB,UAAU,aACb,yBAAKK,MAAO,CAAEQ,cAAe,MAAOC,eAAgB,SAAUC,QAAS,OAAQC,WAAY,WACzF,4BACGzC,EAAOkD,KAAI,SAAC1C,GAAD,OAAgB,uBAAG2C,IAAK3C,EAAM4C,MAAO5C,EAAM4C,aAOlD3D,IClIK4D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAD,CAAQC,SAAUhE,mBAChB,kBAAC,EAAD,OAEFiE,SAASC,eAAe,SDgIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7D,MAAK,SAAA8D,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpE,QAAQoE,MAAMA,EAAMC,c","file":"static/js/main.6d47958d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/twitter-logo.084e6118.svg\";","import React, { Component } from 'react'\nimport { trackPromise, usePromiseTracker } from 'react-promise-tracker'\nimport Loader from 'react-spinners/BarLoader';\nimport { CSSTransition } from 'react-transition-group';\nimport logo from './twitter-logo.svg'\nimport './App.css'\n\nclass App extends Component {\n\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      ip: '127.0.0.1',\n      trends: []\n    };\n  }\n\n  isDevelopmentBuild: boolean = process.env.REACT_APP_MODE === 'Development'\n  TWITTER_BEARER_TOKEN = process.env.REACT_APP_TWITTER_BEARER_TOKEN!\n  \n  if (isDevelopmentBuild: boolean) {\n    console.warn('This application is still under development')\n  }\n\n  fetchIP() {\n    fetch(`https://api.ipify.org?format=json`)\n      .then(res => res.json())\n      .then(({ ip }) => this.setState({ ip }));\n  }\n\n  async fetchSearch(trend: any) {\n    const res = await fetch(`https://twittertrends.perera.io/twitter/search/tweets.json?q=${trend.query}&lang=en`, {\n      headers: {\n        Authorization: `Bearer ${this.TWITTER_BEARER_TOKEN}`\n      }\n    })\n    const data = await res.json()\n    trend.tweets = data.statuses\n    return Promise.resolve(trend)\n  }\n\n  async fetchTrends() {\n    const res = await fetch('https://twittertrends.perera.io/twitter/trends/place.json?id=1', {\n      headers: {\n        Authorization: `Bearer ${this.TWITTER_BEARER_TOKEN}`\n      }\n    })\n    const trends = (await res.json())[0].trends.slice(0,5)\n    \n    for (let i = 0; i < trends.length; i++) {\n      const trend = await this.fetchSearch(trends[i])\n      trends[i] = trend\n    }\n\n    this.setState({ trends })\n\n    return Promise.resolve()\n  }\n\n  componentDidMount() {\n    if (!this.isDevelopmentBuild) {\n      this.fetchIP()\n      trackPromise(this.fetchTrends())\n    }\n  }\n\n  render() {\n    return (\n      <div className='App'>\n        { this.isDevelopmentBuild && (\n          <header className='App-header'>\n            <p>\n              Coming Soon<br/><br/><small>This app is under development</small>\n            </p>\n          </header>\n        )}\n        <header className='App-header'>\n          <StateSwitcher {...this.state}/>\n        </header>\n      </div>\n    )\n  }\n}\n\nconst StateSwitcher = (props: any) => {\n  const { trends } = props\n  const { promiseInProgress } = usePromiseTracker()\n  return (\n    <div style = {{ position: 'relative' }}>\n      <CSSTransition\n        in={promiseInProgress}\n        timeout={500}\n        classNames=\"my-node\"\n        unmountOnExit\n      >\n        <AppLoader />\n      </CSSTransition>\n      <CSSTransition\n        in={!promiseInProgress}\n        timeout={1000}\n        classNames=\"my-node-2\"\n        unmountOnExit\n      >\n        <AppBody trends={trends}/>\n      </CSSTransition>\n    </div>\n  )\n}\n\nconst AppLoader = () => {\n  return (\n    <div className=\"App-state\">\n      <div style={{ flexDirection: 'row', justifyContent: 'center', display: 'flex', alignItems: 'center' }}>\n        <img className='twitter-logo' alt='Twitter' src={logo}></img>\n        <div> Trends\n          <div style={{ height: '0.1vh' }}>\n            <Loader\n              height={3}\n              width={'99%'}\n              color={'white'}\n              loading\n            />\n          </div>\n        </div>\n      </div> \n    </div>\n  )\n}\n\nconst AppBody = (props: any) => {\n  const { trends } = props\n  return (\n    <div className=\"App-state\">\n      <div style={{ flexDirection: 'row', justifyContent: 'center', display: 'flex', alignItems: 'center' }}>\n        <ol>\n          {trends.map((trend: any) => <p key={trend.name}>{trend.name}</p>)}\n        </ol>\n      </div>\n    </div>\n  )\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Router basename={process.env.PUBLIC_URL}>\n    <App/>\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}